######################################################################################################################################
#include<algorithm>

sort(**.begin(), **.end(), cmp | greater<int>() | less<int>() )

std::greater<int>(),大到小

bool cmp(int a, int b){
return a>b;//大到小
}

bool cmp(node a, node b){
return a.x>b.x;//大到小
}

iter=find(**.begin(), **.end(), valToFind); //也适用二维数组中判断某个一维数组是否存在的情况

reverse(v.begin(), v.end());


######################################################################################################################################


######################################################################################################################################
向量
#include<vector>

vector<int> v;
vector<int>::iterator it;

v.push_back();                  //增
v.pop_back();                   //删除尾部
v.back();                       //访问尾部
it=find(v.begin, b.end(), val); //查
it=v.erase(it);                 //删除 ，指向下一个迭代器 
v.insert(it, val)               //插入，在it之前插入val
v.size();                       //实际的元素个数
v.capacity()                    //分配的空间中最多可以放的元素个数
v.resize()                      //重新分配空间
v.clear();                      //清空元素,没有清空分配的空间，v.capacity()不变
v.shrink_to_fit();              //删除多余的空间，resize后可能会分配多余的未利用的空间,

######################################################################################################################################


######################################################################################################################################
#include<set>

set<int> s;
set<int>::iterator it;

c++ stl容器set成员函数:find()--返回一个指向被查找到元素的迭代器
c++ stl容器set成员函数:erase()--删除集合中的元素
c++ stl容器set成员函数:insert()--在集合中插入元素
c++ stl容器set成员函数:begin()--返回指向第一个元素的迭代器
c++ stl容器set成员函数:clear()--清除所有元素
c++ stl容器set成员函数:count()--返回某个值元素的个数
c++ stl容器set成员函数:empty()--如果集合为空，返回true
c++ stl容器set成员函数:end()--返回指向最后一个元素的迭代器
c++ stl容器set成员函数:max_size()--返回集合能容纳的元素的最大限值
c++ stl容器set成员函数:size()--集合中元素的数目
c++ stl容器set成员函数:swap()--交换两个集合变量

set<node> s2;
set中放入结构体,不定义会报错
struct node{
    int b;
    friend bool operator < (const node& n1, const node& n2)
    {
        return n1. b < n2. b;//从小到大排
    }
};

set逆序遍历
s.rbegin(),s.rend()

######################################################################################################################################


######################################################################################################################################
#include<map>

map<string, int> m;
map<string, int>::iterator iter

插入方式1
m["java"]=8;//如果key已存在，则覆盖之前的

插入方式2
m.insert(pair<string, int>("java", 9));//如果key已存在，则不操作，保留之前的

/*
map按照key自动排序
**/

map <string, int>::reverse_iterator  it;//反向迭代器 
	for(it=mapSet.rbegin(); it!=mapSet.rend(); ++it){
		cout<<(*it).first<<" "<<(*it).second<<endl;
	}

iter = m.find("java");//查找key
访问找到的元素:iter->first(key), iter->second(value)

对于map<T, int> m
m[key], 如果key不存在，返回0

m.count(key)//返回key的数量

m.clear();
m.size();
m.empty();

/**
STL中，map 对应的数据结构是 红黑树。红黑树是一种近似于平衡的二叉查找树，里面的数据是有序的。在红黑树上做查找操作的时间复杂度为 O(logN)。而 unordered_map 对应 哈希表，哈希表的特点就是查找效率高，时间复杂度为常数级别 O(1)， 而额外空间复杂度则要高出许多。所以对于需要高效率查询的情况，使用 unordered_map 容器。而如果对内存大小比较敏感或者数据存储要求有序的话，则可以用 map 容器。
*/

######################################################################################################################################


######################################################################################################################################
双向链表
#include<list>
list<int> linkList;
list<int>::iterator it;
linkList.empty();       //判断是否为空 
linkList.clear();       //清空 
linkList.push_back(2);  //在尾部插 
linkList.push_front(1); //在头部插 
linkList.pop_back();    //删除尾部 
linkList.pop_front();   //删除头部 
linkList.unique();      //删除重复元素，多个则删除前面的 
linkList.sort(greater<int>());//排序，默认升序，加greater<int>()变降序
linkList.remove(5);     //指定元素删除 
it=find(linkList.begin(), linkList.end(), 6);//stl find函数，返回元素值为6的迭代器
linkList.insert(it, 5); //在6前插入5
it=linkList.erase(it);  //指定迭代器删除 ，指向下一个迭代器 
--it;                   //向前走 
++it;                   //向后走 
linkList.reverse();     //转置 
linkList.front();       //头部元素
linkList.back();        //尾部元素

######################################################################################################################################


######################################################################################################################################
优先队列
#include<queue>

priority_queue<int> q;

empty();
size();
top();//和队列不一样，不是front()
pop();
push();

int ia[9] = {0,1,2,3,4,8,9,3,5};
priority_queue< int, vector<int>, greater<int> > pq(ia, ia + 9);//小根堆
priority_queue< int, vector<int>, less<int> > pq(ia, ia + 9);//大根堆

自定义类
class node{
public:
	int id;
	//type1
	friend bool operator < (const node& a, const node& b) {
		if(a.id != b.id) return a.id < b.id;
		return false;
	}
};
//type2
struct cmp_node {
	bool operator()(node& a, node& b) {
		if (a.id != b.id) return a.id > b.id;
		return false;
	}
};
int main() {
	// type2
	// std::priority_queue<node, vector<node>, cmp_node> nodes;
	// type1
	std::priority_queue<node> nodes;
	node n1, n2, n3, n4;
	n1.id = 0, n2.id = 4, n3.id = 2;
	nodes.push(n1); nodes.push(n2); nodes.push(n3);
	while (!nodes.empty()) {
		std::cout<<nodes.top().id<<"\n";
		nodes.pop();
	}
	return 0;
}

######################################################################################################################################


######################################################################################################################################
队列
#include<queue>

queue<int> q;

front();//头部元素
back(); //尾部元素

empty();
size();
pop();
push();

######################################################################################################################################


######################################################################################################################################
栈
#include<stack>

stack<int> s;

empty();
size();
top();//不是front()
pop();
push();

######################################################################################################################################


######################################################################################################################################
字符串 string

substr(start, n)
push_back()
pop_back()
insert(iterator, char ch)
insert(int pos, string str)

也就是说有三种用法：
（1）erase(pos,n); 删除从pos开始的n个字符，比如erase(0,1)就是删除第一个字符
（2）erase(position);删除position处的一个字符(position是个string类型的迭代器)
（3）erase(first,last);删除从first到last之间的字符（first和last都是迭代器）
find(string str)

string s="123456";
if(s.find("345")!=string::npos){
     cout<<"find";
}
else{
     cout<<"not find";
}
######################################################################################################################################











